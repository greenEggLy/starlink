// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pb/satsys.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SatSys_GetSatellites_FullMethodName = "/satsys.SatSys/GetSatellites"
	SatSys_UpdateSystem_FullMethodName  = "/satsys.SatSys/UpdateSystem"
	SatSys_CmdGetSystem_FullMethodName  = "/satsys.SatSys/CmdGetSystem"
)

// SatSysClient is the client API for SatSys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SatSysClient interface {
	GetSatellites(ctx context.Context, in *SearchContext, opts ...grpc.CallOption) (*Satellite, error)
	UpdateSystem(ctx context.Context, in *UpdateContext, opts ...grpc.CallOption) (*UpdateResponse, error)
	CmdGetSystem(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdResponse, error)
}

type satSysClient struct {
	cc grpc.ClientConnInterface
}

func NewSatSysClient(cc grpc.ClientConnInterface) SatSysClient {
	return &satSysClient{cc}
}

func (c *satSysClient) GetSatellites(ctx context.Context, in *SearchContext, opts ...grpc.CallOption) (*Satellite, error) {
	out := new(Satellite)
	err := c.cc.Invoke(ctx, SatSys_GetSatellites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *satSysClient) UpdateSystem(ctx context.Context, in *UpdateContext, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, SatSys_UpdateSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *satSysClient) CmdGetSystem(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdResponse, error) {
	out := new(CmdResponse)
	err := c.cc.Invoke(ctx, SatSys_CmdGetSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SatSysServer is the server API for SatSys service.
// All implementations must embed UnimplementedSatSysServer
// for forward compatibility
type SatSysServer interface {
	GetSatellites(context.Context, *SearchContext) (*Satellite, error)
	UpdateSystem(context.Context, *UpdateContext) (*UpdateResponse, error)
	CmdGetSystem(context.Context, *CmdRequest) (*CmdResponse, error)
	mustEmbedUnimplementedSatSysServer()
}

// UnimplementedSatSysServer must be embedded to have forward compatible implementations.
type UnimplementedSatSysServer struct {
}

func (UnimplementedSatSysServer) GetSatellites(context.Context, *SearchContext) (*Satellite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSatellites not implemented")
}
func (UnimplementedSatSysServer) UpdateSystem(context.Context, *UpdateContext) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystem not implemented")
}
func (UnimplementedSatSysServer) CmdGetSystem(context.Context, *CmdRequest) (*CmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdGetSystem not implemented")
}
func (UnimplementedSatSysServer) mustEmbedUnimplementedSatSysServer() {}

// UnsafeSatSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SatSysServer will
// result in compilation errors.
type UnsafeSatSysServer interface {
	mustEmbedUnimplementedSatSysServer()
}

func RegisterSatSysServer(s grpc.ServiceRegistrar, srv SatSysServer) {
	s.RegisterService(&SatSys_ServiceDesc, srv)
}

func _SatSys_GetSatellites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatSysServer).GetSatellites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SatSys_GetSatellites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatSysServer).GetSatellites(ctx, req.(*SearchContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SatSys_UpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatSysServer).UpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SatSys_UpdateSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatSysServer).UpdateSystem(ctx, req.(*UpdateContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SatSys_CmdGetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatSysServer).CmdGetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SatSys_CmdGetSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatSysServer).CmdGetSystem(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SatSys_ServiceDesc is the grpc.ServiceDesc for SatSys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SatSys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "satsys.SatSys",
	HandlerType: (*SatSysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSatellites",
			Handler:    _SatSys_GetSatellites_Handler,
		},
		{
			MethodName: "UpdateSystem",
			Handler:    _SatSys_UpdateSystem_Handler,
		},
		{
			MethodName: "CmdGetSystem",
			Handler:    _SatSys_CmdGetSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/satsys.proto",
}
