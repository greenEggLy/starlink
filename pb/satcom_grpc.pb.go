// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: satcom.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SatComClient is the client API for SatCom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SatComClient interface {
	CommuWizSat(ctx context.Context, opts ...grpc.CallOption) (SatCom_CommuWizSatClient, error)
	// 卫星作为client，向基站发信，两端都是流的方法
	ReceiveFromUnityTemplate(ctx context.Context, opts ...grpc.CallOption) (SatCom_ReceiveFromUnityTemplateClient, error)
	// 可以用的方法，unity端持续发目标的坐标信息，基站持续接收并返回那些哪些卫星正在跟踪以及目标坐标信息
	SendToUnity(ctx context.Context, opts ...grpc.CallOption) (SatCom_SendToUnityClient, error)
}

type satComClient struct {
	cc grpc.ClientConnInterface
}

func NewSatComClient(cc grpc.ClientConnInterface) SatComClient {
	return &satComClient{cc}
}

func (c *satComClient) CommuWizSat(ctx context.Context, opts ...grpc.CallOption) (SatCom_CommuWizSatClient, error) {
	stream, err := c.cc.NewStream(ctx, &SatCom_ServiceDesc.Streams[0], "/commu.SatCom/CommuWizSat", opts...)
	if err != nil {
		return nil, err
	}
	x := &satComCommuWizSatClient{stream}
	return x, nil
}

type SatCom_CommuWizSatClient interface {
	Send(*Sat2BaseInfo) error
	Recv() (*Base2SatInfo, error)
	grpc.ClientStream
}

type satComCommuWizSatClient struct {
	grpc.ClientStream
}

func (x *satComCommuWizSatClient) Send(m *Sat2BaseInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *satComCommuWizSatClient) Recv() (*Base2SatInfo, error) {
	m := new(Base2SatInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *satComClient) ReceiveFromUnityTemplate(ctx context.Context, opts ...grpc.CallOption) (SatCom_ReceiveFromUnityTemplateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SatCom_ServiceDesc.Streams[1], "/commu.SatCom/ReceiveFromUnity_template", opts...)
	if err != nil {
		return nil, err
	}
	x := &satComReceiveFromUnityTemplateClient{stream}
	return x, nil
}

type SatCom_ReceiveFromUnityTemplateClient interface {
	Send(*Unity2BaseInfoTemplate) error
	Recv() (*Base2UnityInfo, error)
	grpc.ClientStream
}

type satComReceiveFromUnityTemplateClient struct {
	grpc.ClientStream
}

func (x *satComReceiveFromUnityTemplateClient) Send(m *Unity2BaseInfoTemplate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *satComReceiveFromUnityTemplateClient) Recv() (*Base2UnityInfo, error) {
	m := new(Base2UnityInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *satComClient) SendToUnity(ctx context.Context, opts ...grpc.CallOption) (SatCom_SendToUnityClient, error) {
	stream, err := c.cc.NewStream(ctx, &SatCom_ServiceDesc.Streams[2], "/commu.SatCom/SendToUnity", opts...)
	if err != nil {
		return nil, err
	}
	x := &satComSendToUnityClient{stream}
	return x, nil
}

type SatCom_SendToUnityClient interface {
	Send(*Base2UnityInfo) error
	CloseAndRecv() (*Unity2BaseInfo, error)
	grpc.ClientStream
}

type satComSendToUnityClient struct {
	grpc.ClientStream
}

func (x *satComSendToUnityClient) Send(m *Base2UnityInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *satComSendToUnityClient) CloseAndRecv() (*Unity2BaseInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Unity2BaseInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SatComServer is the server API for SatCom service.
// All implementations must embed UnimplementedSatComServer
// for forward compatibility
type SatComServer interface {
	CommuWizSat(SatCom_CommuWizSatServer) error
	// 卫星作为client，向基站发信，两端都是流的方法
	ReceiveFromUnityTemplate(SatCom_ReceiveFromUnityTemplateServer) error
	// 可以用的方法，unity端持续发目标的坐标信息，基站持续接收并返回那些哪些卫星正在跟踪以及目标坐标信息
	SendToUnity(SatCom_SendToUnityServer) error
	mustEmbedUnimplementedSatComServer()
}

// UnimplementedSatComServer must be embedded to have forward compatible implementations.
type UnimplementedSatComServer struct {
}

func (UnimplementedSatComServer) CommuWizSat(SatCom_CommuWizSatServer) error {
	return status.Errorf(codes.Unimplemented, "method CommuWizSat not implemented")
}
func (UnimplementedSatComServer) ReceiveFromUnityTemplate(SatCom_ReceiveFromUnityTemplateServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveFromUnityTemplate not implemented")
}
func (UnimplementedSatComServer) SendToUnity(SatCom_SendToUnityServer) error {
	return status.Errorf(codes.Unimplemented, "method SendToUnity not implemented")
}
func (UnimplementedSatComServer) mustEmbedUnimplementedSatComServer() {}

// UnsafeSatComServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SatComServer will
// result in compilation errors.
type UnsafeSatComServer interface {
	mustEmbedUnimplementedSatComServer()
}

func RegisterSatComServer(s grpc.ServiceRegistrar, srv SatComServer) {
	s.RegisterService(&SatCom_ServiceDesc, srv)
}

func _SatCom_CommuWizSat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SatComServer).CommuWizSat(&satComCommuWizSatServer{stream})
}

type SatCom_CommuWizSatServer interface {
	Send(*Base2SatInfo) error
	Recv() (*Sat2BaseInfo, error)
	grpc.ServerStream
}

type satComCommuWizSatServer struct {
	grpc.ServerStream
}

func (x *satComCommuWizSatServer) Send(m *Base2SatInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *satComCommuWizSatServer) Recv() (*Sat2BaseInfo, error) {
	m := new(Sat2BaseInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SatCom_ReceiveFromUnityTemplate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SatComServer).ReceiveFromUnityTemplate(&satComReceiveFromUnityTemplateServer{stream})
}

type SatCom_ReceiveFromUnityTemplateServer interface {
	Send(*Base2UnityInfo) error
	Recv() (*Unity2BaseInfoTemplate, error)
	grpc.ServerStream
}

type satComReceiveFromUnityTemplateServer struct {
	grpc.ServerStream
}

func (x *satComReceiveFromUnityTemplateServer) Send(m *Base2UnityInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *satComReceiveFromUnityTemplateServer) Recv() (*Unity2BaseInfoTemplate, error) {
	m := new(Unity2BaseInfoTemplate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SatCom_SendToUnity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SatComServer).SendToUnity(&satComSendToUnityServer{stream})
}

type SatCom_SendToUnityServer interface {
	SendAndClose(*Unity2BaseInfo) error
	Recv() (*Base2UnityInfo, error)
	grpc.ServerStream
}

type satComSendToUnityServer struct {
	grpc.ServerStream
}

func (x *satComSendToUnityServer) SendAndClose(m *Unity2BaseInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *satComSendToUnityServer) Recv() (*Base2UnityInfo, error) {
	m := new(Base2UnityInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SatCom_ServiceDesc is the grpc.ServiceDesc for SatCom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SatCom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commu.SatCom",
	HandlerType: (*SatComServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommuWizSat",
			Handler:       _SatCom_CommuWizSat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveFromUnity_template",
			Handler:       _SatCom_ReceiveFromUnityTemplate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendToUnity",
			Handler:       _SatCom_SendToUnity_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "satcom.proto",
}
